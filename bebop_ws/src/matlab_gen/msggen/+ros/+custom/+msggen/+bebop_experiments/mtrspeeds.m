classdef mtrspeeds < ros.Message
    %mtrspeeds MATLAB implementation of bebop_experiments/mtrspeeds
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'bebop_experiments/mtrspeeds' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '4159a6b337f9935f0d25263e50f2c72a' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        M1
        M2
        M3
        M4
    end
    
    properties (Constant, Hidden)
        PropertyList = {'M1', 'M2', 'M3', 'M4'} % List of non-constant message properties
        ROSPropertyList = {'m_1', 'm_2', 'm_3', 'm_4'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = mtrspeeds(msg)
            %mtrspeeds Construct the message object mtrspeeds
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function m1 = get.M1(obj)
            %get.M1 Get the value for property M1
            m1 = double(obj.JavaMessage.getM1);
        end
        
        function set.M1(obj, m1)
            %set.M1 Set the value for property M1
            validateattributes(m1, {'numeric'}, {'nonempty', 'scalar'}, 'mtrspeeds', 'M1');
            
            obj.JavaMessage.setM1(m1);
        end
        
        function m2 = get.M2(obj)
            %get.M2 Get the value for property M2
            m2 = double(obj.JavaMessage.getM2);
        end
        
        function set.M2(obj, m2)
            %set.M2 Set the value for property M2
            validateattributes(m2, {'numeric'}, {'nonempty', 'scalar'}, 'mtrspeeds', 'M2');
            
            obj.JavaMessage.setM2(m2);
        end
        
        function m3 = get.M3(obj)
            %get.M3 Get the value for property M3
            m3 = double(obj.JavaMessage.getM3);
        end
        
        function set.M3(obj, m3)
            %set.M3 Set the value for property M3
            validateattributes(m3, {'numeric'}, {'nonempty', 'scalar'}, 'mtrspeeds', 'M3');
            
            obj.JavaMessage.setM3(m3);
        end
        
        function m4 = get.M4(obj)
            %get.M4 Get the value for property M4
            m4 = double(obj.JavaMessage.getM4);
        end
        
        function set.M4(obj, m4)
            %set.M4 Set the value for property M4
            validateattributes(m4, {'numeric'}, {'nonempty', 'scalar'}, 'mtrspeeds', 'M4');
            
            obj.JavaMessage.setM4(m4);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.M1 = obj.M1;
            cpObj.M2 = obj.M2;
            cpObj.M3 = obj.M3;
            cpObj.M4 = obj.M4;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.M1 = strObj.M1;
            obj.M2 = strObj.M2;
            obj.M3 = strObj.M3;
            obj.M4 = strObj.M4;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.M1 = obj.M1;
            strObj.M2 = obj.M2;
            strObj.M3 = obj.M3;
            strObj.M4 = obj.M4;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.bebop_experiments.mtrspeeds.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.bebop_experiments.mtrspeeds;
            obj.reload(strObj);
        end
    end
end
