// Generated by gencpp from file bebop_experiments/mtrspeeds.msg
// DO NOT EDIT!


#ifndef BEBOP_EXPERIMENTS_MESSAGE_MTRSPEEDS_H
#define BEBOP_EXPERIMENTS_MESSAGE_MTRSPEEDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bebop_experiments
{
template <class ContainerAllocator>
struct mtrspeeds_
{
  typedef mtrspeeds_<ContainerAllocator> Type;

  mtrspeeds_()
    : m_1(0.0)
    , m_2(0.0)
    , m_3(0.0)
    , m_4(0.0)  {
    }
  mtrspeeds_(const ContainerAllocator& _alloc)
    : m_1(0.0)
    , m_2(0.0)
    , m_3(0.0)
    , m_4(0.0)  {
  (void)_alloc;
    }



   typedef double _m_1_type;
  _m_1_type m_1;

   typedef double _m_2_type;
  _m_2_type m_2;

   typedef double _m_3_type;
  _m_3_type m_3;

   typedef double _m_4_type;
  _m_4_type m_4;





  typedef boost::shared_ptr< ::bebop_experiments::mtrspeeds_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bebop_experiments::mtrspeeds_<ContainerAllocator> const> ConstPtr;

}; // struct mtrspeeds_

typedef ::bebop_experiments::mtrspeeds_<std::allocator<void> > mtrspeeds;

typedef boost::shared_ptr< ::bebop_experiments::mtrspeeds > mtrspeedsPtr;
typedef boost::shared_ptr< ::bebop_experiments::mtrspeeds const> mtrspeedsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bebop_experiments::mtrspeeds_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bebop_experiments::mtrspeeds_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bebop_experiments::mtrspeeds_<ContainerAllocator1> & lhs, const ::bebop_experiments::mtrspeeds_<ContainerAllocator2> & rhs)
{
  return lhs.m_1 == rhs.m_1 &&
    lhs.m_2 == rhs.m_2 &&
    lhs.m_3 == rhs.m_3 &&
    lhs.m_4 == rhs.m_4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bebop_experiments::mtrspeeds_<ContainerAllocator1> & lhs, const ::bebop_experiments::mtrspeeds_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bebop_experiments

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bebop_experiments::mtrspeeds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bebop_experiments::mtrspeeds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bebop_experiments::mtrspeeds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bebop_experiments::mtrspeeds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bebop_experiments::mtrspeeds_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bebop_experiments::mtrspeeds_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bebop_experiments::mtrspeeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4159a6b337f9935f0d25263e50f2c72a";
  }

  static const char* value(const ::bebop_experiments::mtrspeeds_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4159a6b337f9935fULL;
  static const uint64_t static_value2 = 0x0d25263e50f2c72aULL;
};

template<class ContainerAllocator>
struct DataType< ::bebop_experiments::mtrspeeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bebop_experiments/mtrspeeds";
  }

  static const char* value(const ::bebop_experiments::mtrspeeds_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bebop_experiments::mtrspeeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 m_1\n"
"float64 m_2\n"
"float64 m_3\n"
"float64 m_4\n"
"\n"
;
  }

  static const char* value(const ::bebop_experiments::mtrspeeds_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bebop_experiments::mtrspeeds_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.m_1);
      stream.next(m.m_2);
      stream.next(m.m_3);
      stream.next(m.m_4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mtrspeeds_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bebop_experiments::mtrspeeds_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bebop_experiments::mtrspeeds_<ContainerAllocator>& v)
  {
    s << indent << "m_1: ";
    Printer<double>::stream(s, indent + "  ", v.m_1);
    s << indent << "m_2: ";
    Printer<double>::stream(s, indent + "  ", v.m_2);
    s << indent << "m_3: ";
    Printer<double>::stream(s, indent + "  ", v.m_3);
    s << indent << "m_4: ";
    Printer<double>::stream(s, indent + "  ", v.m_4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEBOP_EXPERIMENTS_MESSAGE_MTRSPEEDS_H
